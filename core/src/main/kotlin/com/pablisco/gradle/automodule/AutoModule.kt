package com.pablisco.gradle.automodule

import com.pablisco.gradle.automodule.filetree.FileTreeScope
import org.gradle.api.logging.LogLevel

open class AutoModule(
    /**
     * Used to define the name of the generated file.
     */
    var modulesFileName: String = "modules",
    /**
     * Add the **absolute** path to any module that we want to ignore.
     *
     * @see [ignore]
     */
    var ignored: List<String> = emptyList(),
    /**
     * This is the entry point of the generated module graph.
     */
    var entryPointName: String = "local",
    /**
     * To change the level of logging of autoModule
     */
    var logLevel: LogLevel = LogLevel.INFO,

    /**
     * When enabled then autoModule doesn't generate a new graph if the source code hasn't changed.
     */
    var cacheEnabled: Boolean = true
) {

    internal val templates: MutableList<AutoModuleTemplate> = mutableListOf()

    /**
     * Adds the **absolute** path to any module that we want to ignore.
     *
     * @see [ignored]
     */
    @Suppress("MemberVisibilityCanBePrivate") // Api
    fun ignore(vararg modules: String) {
        ignored += modules
    }

    /**
     * Add a new template to generate a task with the name `create{Name}Module` that can be used
     * to create new module
     *
     * @param type The type for the modules generated by this template
     * @param path Optional path for where to create the modules
     * @param files Lambda in charge of creating the files for the created module
     */
    fun template(type: String, path: String? = null, files: FileTreeScope.() -> Unit) {
        templates += AutoModuleTemplate(type, path, files)
    }

}

internal data class AutoModuleTemplate(
    val name: String,
    val path: String?,
    val files: FileTreeScope.() -> Unit
)
