package com.pablisco.gradle.automodule

import com.pablisco.gradle.automodule.utils.camelCase
import com.pablisco.gradle.automodule.utils.snakeCase
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.TypeSpec.Companion.objectBuilder
import java.nio.file.Path
import com.squareup.kotlinpoet.FileSpec.Companion.builder as file

internal fun ModuleNode.writeTo(directory: Path, fileName: String) {
    file("", fileName).apply {
        addComment("Generated by AutoModule - DO NOT EDIT - it'll be overridden")
        addAnnotation(AnnotationSpec.builder(Suppress::class).addMember("\"ClassName\"").build())
        addType(toType(name = "autoModules"))
    }.build().writeTo(directory)
}

private fun ModuleNode.toType(name: String = nameAsType): TypeSpec =
    objectWith(name = name) {
        if(path != null) {
            addDependencyInterface(path)
        }
        children.forEach { child ->
            addType(child.toType())
            addProperty(child.asPropertySpec())
        }
        if (children.firstOrNull() != null) {
            addFunction(dslInvokeFun(ClassName("", name)))
        }
    }

private fun dslInvokeFun(victim: ClassName): FunSpec =
    FunSpec.builder("invoke")
        .addParameter("block", LambdaTypeName.get(receiver = victim, returnType = UNIT))
        .addModifiers(KModifier.OPERATOR)
        .addCode("apply(block)")
        .build()

private fun ModuleNode.asPropertySpec(): PropertySpec =
    PropertySpec.builder(nameAsProperty, ClassName("", nameAsType))
        .initializer(nameAsType)
        .build()

private val ModuleNode.nameAsProperty : String get() = name.snakeCase()
private val ModuleNode.nameAsType : String get() = name.camelCase()

private fun TypeSpec.Builder.addDependencyInterface(path: String): TypeSpec.Builder =
    addSuperinterface(
        superinterface = AutoModuleDependencyClassName,
        delegate = CodeBlock.of("autoModuleDependency(\"$path\")")
    )

private fun objectWith(name: String, block: TypeSpec.Builder.() -> Unit): TypeSpec =
    objectBuilder(name).apply(block).build()

private val AutoModuleDependencyClassName = ClassName("", "AutoModuleDependency")
